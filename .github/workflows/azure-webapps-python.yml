# .github/workflows/ci-cd.yml

name: CI/CD Desktop Pipeline

on:
  push:
    branches: [ main ]
    tags: ['v*.*.*']         # Triggers on version tags like v1.2.3 :contentReference[oaicite:2]{index=2}
  pull_request:
    branches: [ main ]
  workflow_dispatch:         # Allows manual runs

jobs:
  build_test_package:
    runs-on: ubuntu-latest    # Use windows-latest or macos-latest for other OSes

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Build all three :contentReference[oaicite:3]{index=3}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4                           # Clones repo :contentReference[oaicite:4]{index=4}

      - name: Set up Flutter SDK
        uses: subosito/flutter-action@v2                    # Installs Flutter on all OSes :contentReference[oaicite:5]{index=5}
        with:
          channel: stable
          flutter-version: '3.19.0'

      - name: Install dependencies
        run: flutter pub get                               # Fetch Dart & Flutter packages :contentReference[oaicite:6]{index=6}

      - name: Static analysis
        run: flutter analyze                               # Lint and style checks :contentReference[oaicite:7]{index=7}

      - name: Run unit & widget tests
        run: flutter test                                  # Validates code functionality :contentReference[oaicite:8]{index=8}

      - name: Enable desktop support
        if: matrix.os == 'windows-latest'
        run: flutter config --enable-windows-desktop        # Windows only :contentReference[oaicite:9]{index=9}

      - name: Build desktop app
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            flutter build linux --release
            FILE=build/linux/x64/release/bundle
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            flutter build macos --release
            FILE=build/macos/Build/Products/Release
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            flutter build windows --release
            FILE=build/windows/runner/Release
          fi

      - name: Package build output
        run: |
          mkdir -p release
          cd $FILE
          zip -r ../../release/mindrate-${{ matrix.os }}.zip *

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4                      # Artifacts visible under Actions UI :contentReference[oaicite:10]{index=10}
        with:
          name: mindrate-${{ matrix.os }}
          path: release/mindrate-${{ matrix.os }}.zip

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false                                 # Toggle for beta :contentReference[oaicite:11]{index=11}

      - name: Upload Release Assets
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release/mindrate-${{ matrix.os }}.zip
          asset_name: mindrate-${{ github.ref_name }}-${{ matrix.os }}.zip
          asset_content_type: application/zip               # Correct MIME type :contentReference[oaicite:12]{index=12}
